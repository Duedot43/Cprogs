/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -m -i SensorInfo.h -p org.kde.ksystemstats /build/libksysguard/src/libksysguard-5.23.4/systemstats/org.kde.ksystemstats.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_KDE_KSYSTEMSTATS_H
#define ORG_KDE_KSYSTEMSTATS_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "SensorInfo.h"

/*
 * Proxy class for interface org.kde.ksystemstats
 */
class OrgKdeKsystemstatsInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.ksystemstats"; }

public:
    OrgKdeKsystemstatsInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgKdeKsystemstatsInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QHash<QString,KSysGuard::SensorInfo> > allSensors()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("allSensors"), argumentList);
    }

    inline QDBusPendingReply<KSysGuard::SensorDataList> sensorData(const QStringList &sensorIds)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sensorIds);
        return asyncCallWithArgumentList(QStringLiteral("sensorData"), argumentList);
    }

    inline QDBusPendingReply<QHash<QString,KSysGuard::SensorInfo> > sensors(const QStringList &sensorsIds)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sensorsIds);
        return asyncCallWithArgumentList(QStringLiteral("sensors"), argumentList);
    }

    inline QDBusPendingReply<> subscribe(const QStringList &sensorIds)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sensorIds);
        return asyncCallWithArgumentList(QStringLiteral("subscribe"), argumentList);
    }

    inline QDBusPendingReply<> unsubscribe(const QStringList &sensorIds)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sensorIds);
        return asyncCallWithArgumentList(QStringLiteral("unsubscribe"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void newSensorData(KSysGuard::SensorDataList sensorData);
    void sensorAdded(const QString &sensorId);
    void sensorMetaDataChanged(const QHash<QString,KSysGuard::SensorInfo> &metaData);
    void sensorRemoved(const QString &sensorId);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKsystemstatsInterface ksystemstats;
  }
}
#endif
