// This file is generated by kconfig_compiler_kf5 from jobsettings.kcfg.
// All changes you do to this file will be lost.
#ifndef NOTIFICATIONMANAGER_JOBSETTINGS_H
#define NOTIFICATIONMANAGER_JOBSETTINGS_H

#include "notificationmanager_export.h"

#include <qglobal.h>
#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

namespace NotificationManager {

class NOTIFICATIONMANAGER_EXPORT JobSettings : public KConfigSkeleton
{
  Q_OBJECT
  public:

    JobSettings( QObject *parent = nullptr );
    ~JobSettings() override;

    /**
      Set InTaskManager
    */
    void setInTaskManager( bool v )
    {
      if (v != mInTaskManager && !isInTaskManagerImmutable()) {
        mInTaskManager = v;
        Q_EMIT InTaskManagerChanged();
      }
    }

    Q_PROPERTY(bool inTaskManager READ inTaskManager WRITE setInTaskManager NOTIFY InTaskManagerChanged)
    Q_PROPERTY(bool isInTaskManagerImmutable READ isInTaskManagerImmutable CONSTANT)
    /**
      Get InTaskManager
    */
    bool inTaskManager() const
    {
      return mInTaskManager;
    }

    /**
      Is InTaskManager Immutable
    */
    bool isInTaskManagerImmutable() const
    {
      return isImmutable( QStringLiteral( "InTaskManager" ) );
    }

    /**
      Get InTaskManager default value
    */
    bool defaultInTaskManagerValue() const
    {
        return defaultInTaskManagerValue_helper();
    }

    /**
      Set InNotifications
    */
    void setInNotifications( bool v )
    {
      if (v != mInNotifications && !isInNotificationsImmutable()) {
        mInNotifications = v;
        Q_EMIT InNotificationsChanged();
      }
    }

    Q_PROPERTY(bool inNotifications READ inNotifications WRITE setInNotifications NOTIFY InNotificationsChanged)
    Q_PROPERTY(bool isInNotificationsImmutable READ isInNotificationsImmutable CONSTANT)
    /**
      Get InNotifications
    */
    bool inNotifications() const
    {
      return mInNotifications;
    }

    /**
      Is InNotifications Immutable
    */
    bool isInNotificationsImmutable() const
    {
      return isImmutable( QStringLiteral( "InNotifications" ) );
    }

    /**
      Get InNotifications default value
    */
    bool defaultInNotificationsValue() const
    {
        return defaultInNotificationsValue_helper();
    }

    /**
      Set PermanentPopups
    */
    void setPermanentPopups( bool v )
    {
      if (v != mPermanentPopups && !isPermanentPopupsImmutable()) {
        mPermanentPopups = v;
        Q_EMIT PermanentPopupsChanged();
      }
    }

    Q_PROPERTY(bool permanentPopups READ permanentPopups WRITE setPermanentPopups NOTIFY PermanentPopupsChanged)
    Q_PROPERTY(bool isPermanentPopupsImmutable READ isPermanentPopupsImmutable CONSTANT)
    /**
      Get PermanentPopups
    */
    bool permanentPopups() const
    {
      return mPermanentPopups;
    }

    /**
      Is PermanentPopups Immutable
    */
    bool isPermanentPopupsImmutable() const
    {
      return isImmutable( QStringLiteral( "PermanentPopups" ) );
    }

    /**
      Get PermanentPopups default value
    */
    bool defaultPermanentPopupsValue() const
    {
        return defaultPermanentPopupsValue_helper();
    }


    enum {
      signalInTaskManagerChanged = 0x1,
      signalInNotificationsChanged = 0x2,
      signalPermanentPopupsChanged = 0x4
    };

  Q_SIGNALS:
    void InTaskManagerChanged();

    void InNotificationsChanged();

    void PermanentPopupsChanged();

  private:
    void itemChanged(quint64 flags);

  protected:

    // Jobs
    bool mInTaskManager;
    bool defaultInTaskManagerValue_helper() const;
    bool mInNotifications;
    bool defaultInNotificationsValue_helper() const;
    bool mPermanentPopups;
    bool defaultPermanentPopupsValue_helper() const;

  private:
};

}

#endif

